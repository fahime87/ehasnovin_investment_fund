# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'userCreator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from __future__ import division
from email import header
from functools import partial
import imp
from sqlite3 import Cursor
from PyQt5 import QtWidgets
from unicodedata import name
from PyQt5.QtCore import QSize,QCoreApplication,pyqtSignal,Qt
from PyQt5.QtWidgets import QMenu, QTableWidgetItem, QVBoxLayout,QDialog,QHBoxLayout,QPushButton,QMainWindow,QTableWidget,QDesktopWidget,QWidget
import mysql.connector as mc
from sqlalchemy import null
from dataBase import Sql_DB
from tools import FormControl,FormGroup,CreateTable
from messageBox import messageBoxDialog
from payment import PaymentForm,PaymentListForInvestor
import decimal
from wallet import WalletListForInvestor
from sqlalchemy import null
from ehsanStyle import TableCSS,BtnCss
from PyQt5.QtGui import QCursor


class Investor():
    def __init__(self):
        self.name =null
        self.family =null
        self.seniorName=null
        self.whatsApp = null
        self.nationCode=null
        self.Id = null

    def save(self):
        try:
            mydb =Sql_DB()
            myConnection=mydb.db_connect()
            mycursor = myConnection.cursor()
            sql = "INSERT INTO Customers (Id,Name,Family,Senior,whatsapp,NationCode) VALUES (%s, %s,%s,%s,%s,%s)"
            val = (self.Id,self.name,self.family,self.seniorName,self.whatsApp,self.nationCode)
            mycursor.execute(sql, val)
            myConnection.commit()
            messageBoxDialog.show_info_messagebox("Investor created successfully")
            return True
        except mc.Error as e:
            messageBoxDialog.show_critical_messagebox("{0} :creating Investor was not successfully".format(e))
            return False    
    def update(self,inv_id):
        try:
            mydb =Sql_DB()
            myConnection=mydb.db_connect()
            mycursor = myConnection.cursor()
            sql = f"""UPDATE Customers 
                    SET Id='{self.Id}' ,Name='{self.name}',Family='{self.family}' ,Senior='{self.seniorName}',
                        whatsapp='{self.whatsApp}',NationCode='{self.nationCode}'
                        WHERE Id='{inv_id}'
                    """
            mycursor.execute(sql)
            myConnection.commit()
            messageBoxDialog.show_info_messagebox("Investor updated successfully")
            return True
        except mc.Error as e:
            messageBoxDialog.show_critical_messagebox("{0} :updating Investor was not successfully".format(e))
            return False         
class InvestorForm(QDialog):
    createNewOne=pyqtSignal(bool)
    def __init__(self,inv_id=null):
        super(InvestorForm, self).__init__()
        # setting window title
        self.setWindowTitle("User Form")
        # setting geometry to the window
        self.setGeometry(700, 300, 400, 400)
        # items for our form
        default_name=""
        default_family=""
        default_senior=""
        default_whatsapp=""
        default_nation_code=""
        if inv_id != null:
            inv_info=getInvestorInfo(inv_id)
            default_name=inv_info['name']
            default_family=inv_info['family']
            default_senior=inv_info['senior']
            default_whatsapp=inv_info['whatsapp']
            default_nation_code=inv_info['nationcode']
        self.name =FormControl('First name') 
        self.name.required=True
        self.name.form_control.setText(default_name)
        self.family = FormControl('Family') 
        self.family.form_control.setText(default_family)
        self.family.required=True
        self.seniorName=FormControl('Senior') 
        self.seniorName.form_control.setText(default_senior)
        self.whatsApp = FormControl('Whats App') 
        self.whatsApp.form_control.setText(default_whatsapp)
        self.whatsApp.required=True
        self.whatsApp.Lenght=11
        self.whatsApp.number=True
        self.nationCode=FormControl('Nation Code') 
        self.nationCode.form_control.setText(default_nation_code)
        self.nationCode.required=True
        self.nationCode.number=True
        self.nationCode.Lenght=10
        self.Id = FormControl('Id') 
        if inv_id != null:
            self.Id.form_control.setText(inv_id)
        else:    
            self.Id.form_control.setText(self.defaultId())
        self.Id.number=True
        #create a from group and add item to that in order to orgenize them in layout and
        #validate them befor "save" button activaiting  
        self.formGroupBox = FormGroup()
        self.formGroupBox.groupValidation.connect(self.formValidation)
        self.formGroupBox.addControl( self.Id)
        self.formGroupBox.addControl( self.name)
        self.formGroupBox.addControl( self.family)
        self.formGroupBox.addControl( self.seniorName)
        self.formGroupBox.addControl( self.nationCode)
        self.formGroupBox.addControl( self.whatsApp)

        self.buttonBox = QHBoxLayout()
        self.saveButton=QPushButton('save')
        self.saveButton.setDisabled(True)
        self.cancleButton=QPushButton('cancle')
        self.buttonBox.addWidget(self.saveButton)
        self.buttonBox.addWidget(self.cancleButton)
        # creating a vertical layout
        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.formGroupBox)
        # adding button box to the layout
        mainLayout.addLayout(self.buttonBox)
        # setting lay out
        self.setLayout(mainLayout)
        self.saveButton.clicked.connect(partial(self.accept,inv_id))
        self.cancleButton.clicked.connect(self.reject)

    def accept(self,inv_id=null):
        #print("Person Name : {0}".format(self.name.form_control.text()))
        investor=Investor()
        investor.name=self.name.form_control.text()  
        investor.family=self.family.form_control.text()
        investor.seniorName=self.seniorName.form_control.text()
        investor.whatsApp=self.whatsApp.form_control.text()
        investor.nationCode=self.nationCode.form_control.text()
        investor.Id=self.Id.form_control.text()
        if inv_id == null:
            if investor.save():
                self.createNewOne.emit(True)
                self.close()
        else:
            if investor.update(inv_id): 
                self.createNewOne.emit(True)
                self.close()       
    def defaultId(self):
        try:
            connection=Sql_DB().db_connect()
            my_cursor=connection.cursor()
            query="SELECT MAX(Id) FROM customers"
            my_cursor.execute(query)
            maxid=my_cursor.fetchone()[0]
            return str(int(maxid)+1)
        except mc.Error as e:
            messageBoxDialog.show_critical_messagebox(F"{e}")         
    def formValidation(self, is_valid):
        if is_valid:
            self.saveButton.setEnabled(True)
        else:
            self.saveButton.setDisabled(True)
class InvestorList(QWidget):
    def __init__(self,master):
        super().__init__()
        self.master=master
        self.setMinimumSize(QSize(1200, 900))
        self.setWindowTitle("List of Ehsan Novin Investers")
        self.superLayout=QVBoxLayout(self)
        
        self.createNewInvestor=QPushButton("Create New Investor")
        self.createNewInvestor.setStyleSheet(BtnCss.btnStyle())
        self.investor_Table=self.investorTable()
        self.createNewInvestor.clicked.connect(partial(self.investorForm,null))
        
         # Display the table and pushbutton
        self.superLayout.addWidget(self.createNewInvestor)
        self.superLayout.addWidget(self.investor_Table,alignment=Qt.AlignCenter)
        

        """ # Display the window in the center of the screen
        win = self.frameGeometry()
        pos = QDesktopWidget().availableGeometry().center()
        win.moveCenter(pos)
        self.move(win.topLeft())
        self.show()
"""
    def investorTable(self):
        self.rowToInvestorId={}
        header,data=getInvestors()
        table=QTableWidget()
        table.setColumnCount(len(header))
        table.setRowCount(len(data))
        table.setHorizontalHeaderLabels(header)
        table.setStyleSheet(TableCSS.tableStyle1())
        for n,row in enumerate(data):
            self.rowToInvestorId[n]=row[0]
            for m,item in enumerate(row):
                tableItem=QTableWidgetItem(str(item))
                table.setItem(n,m,tableItem)
            '''            add_btn=QPushButton("Payments") 
            investor_id=row[0] 
            add_btn.clicked.connect(partial(self.showInvestorPayment,investor_id))
            rmv_btn=QPushButton("remove investor") 
            rmv_btn.clicked.connect(partial(self.removeInvestor,investor_id))
            wallet_btn=QPushButton("Wallet List")
            wallet_btn.clicked.connect(partial(self.investorWallet,investor_id))
            asset_btn=QPushButton("Asset List ")
            asset_btn.clicked.connect(partial(self.showInvestorAssets,investor_id))
            edit_btn=QPushButton("Edit")
            edit_btn.clicked.connect(partial(self.investorForm,investor_id))
            #table.setCellWidget(n, 7, add_btn)
            #table.setCellWidget(n, 6, wallet_btn)
            #table.setCellWidget(n,8,asset_btn)
            #table.setCellWidget(n,9,rmv_btn)
            #table.setCellWidget(n,10,edit_btn)'''
        table.setSizeAdjustPolicy(
        QtWidgets.QAbstractScrollArea.AdjustToContents)    
        table.resizeColumnsToContents()
        table.resizeRowsToContents() 
        width=0  
        for i in range (table.columnCount()+1):
            width+=table.horizontalHeader().sectionSize(i)   
        t=table.verticalHeader().sizeHint().width()
        table.setMinimumWidth(width+t) 
        table.setMinimumHeight(700)   
        table.contextMenuEvent=self.investorRightClicked
        return table 
    def investorRightClicked(self,event):
        row = self.investor_Table.rowAt(event.pos().y())
        invid=self.rowToInvestorId[row]
        contextMenu = QMenu(self)
        deleteAct = contextMenu.addAction("remove")
        paymentsAct = contextMenu.addAction("payments")
        walletAct = contextMenu.addAction("wallet")

        contextMenu.popup(QCursor.pos())
        deleteAct.triggered.connect(partial(self.removeInvestor,invid))
        paymentsAct.triggered.connect(partial(self.showInvestorPayment,invid))
        walletAct.triggered.connect(partial(self.investorWallet,invid))

        
    def investorWallet(self,investor_id):
        wallet_content=WalletListForInvestor(investor_id) 
        self.master.setCentralWidget(wallet_content) 

    def showInvestorAssets(self,investor_id):
        asset_list=InvestorAssetList(investor_id)
        asset_frame=QMainWindow(self)
        asset_frame.setCentralWidget(asset_list)
        asset_frame.show()
    def addPaymentInvestor(self,investorId):
        addPayment_investor=PaymentForm(investorId) 
        addPayment_investor.exec() 
    def showInvestorPayment(self,investor_id):
        payment_list=PaymentListForInvestor(investor_id)
        payment_win=QMainWindow(self)
        payment_win.setCentralWidget(payment_list)
        payment_win.show()
    def updateTable(self):
        header,data=getInvestors()
        #print(len(data))
        header.append("")
        header.append("")  
        header.append("")     
        header.append("")
        header.append("")
        table=self.investor_Table
        table.setColumnCount(len(header))
        table.setRowCount(len(data))
        table.setMinimumWidth(1000)
        table.setMinimumHeight(500)
        table.setHorizontalHeaderLabels(header)

        for n,row in enumerate(data):
            for m,item in enumerate(row):
                tableItem=QTableWidgetItem(str(item))
                table.setItem(n,m,tableItem)
            add_btn=QPushButton("Payments") 
            investor_id=row[0] 
            add_btn.clicked.connect(partial(self.showInvestorPayment,investor_id))
            rmv_btn=QPushButton("remove investor") 
            rmv_btn.clicked.connect(partial(self.removeInvestor,investor_id))
            wallet_btn=QPushButton("Wallet List")
            wallet_btn.clicked.connect(partial(self.investorWallet,investor_id))
            asset_btn=QPushButton("Asset List ")
            asset_btn.clicked.connect(partial(self.showInvestorAssets,investor_id))
            edit_btn=QPushButton("Edit")
            edit_btn.clicked.connect(partial(self.investorForm,investor_id))
            table.setCellWidget(n, 7, add_btn)
            table.setCellWidget(n, 6, wallet_btn)
            table.setCellWidget(n,8,asset_btn)
            table.setCellWidget(n,9,rmv_btn)
            table.setCellWidget(n,10,edit_btn)
        table.resizeColumnsToContents()
        table.resizeRowsToContents()     

    def investorForm(self,inv_id):
            form=InvestorForm(inv_id)
            form.createNewOne.connect(partial(self.updateTable))
            form.exec()
    def removeInvestor(self,investor_id):
        try:
            mydb =Sql_DB()
            myConnection=mydb.db_connect()
            mycursor = myConnection.cursor()
            sql = F"DELETE FROM CUSTOMERS WHERE Id='{investor_id}'"
            mycursor.execute(sql)
            myConnection.commit()
            messageBoxDialog.show_info_messagebox("Investor removed successfully")
            self.updateTable()
        except mc.Error as e:
            messageBoxDialog.show_critical_messagebox("{0} :deleting  Investor was not successfully".format(e))
            return False    
class InvestorAssetList(QWidget)  :
    def __init__(self,customer_id):
        super().__init__()
        self.setMinimumSize(QSize(1200, 700))
        self.setWindowTitle("List of Ehsan Novin Investors Payment")
        self.superLayout=QVBoxLayout(self)
        self.main_table=self.mainTable(customer_id)
        self.superLayout.addWidget(self.main_table)
        
    def mainTable(self,customer_id):
        periods,basket,assets,percents=self.getInvestorsInfo(customer_id)
        total=[]
        columns=[]
        column_counter={}
        for i,value in enumerate(basket):
            column_counter[value[1]]=i
            columns.append(value[0])
            total.append(0) 

        row_counter={}
        rows=[]
        for i,value in enumerate(periods):
            row_counter[value[1]]=i
            rows.append(F"{value[0]}")
        percent_dict={}
        for i,value in enumerate(percents):
            percent_dict[value[1]]= float(round(decimal.Decimal(value[3])/decimal.Decimal(value[0]) ,10))         
        table=QTableWidget()
        table.setColumnCount(len(columns))
        table.setRowCount(len(rows))
        table.setMinimumWidth(400)
        table.setMinimumHeight(500)
        table.setHorizontalHeaderLabels(columns)
        table.setVerticalHeaderLabels(rows)

        for rec in assets:
            asset_amount=rec[2]*percent_dict[rec[0]]
            tableItem=QTableWidgetItem(str(asset_amount))
            table.setItem(row_counter[rec[0]],column_counter[rec[1]],tableItem)
            total[column_counter[rec[1]]]+=1
  
        """     for i,pay in enumerate(total):
            tableItem=QTableWidgetItem(F"{pay}")
            table.setItem(i,total_col,tableItem)"""
        table.resizeColumnsToContents()
        table.resizeRowsToContents()  
        return table   
    def getInvestorsInfo(self,customer_id):
        try:
            mydb=Sql_DB()
            myConnection=mydb.db_connect()
            myCursor=myConnection.cursor()
            #each investor payments in every period
            asset_query="""SELECT  PeriodId,AssetId,SUM(ShareBought)
                            FROM  assets
                            WHERE PeriodId IN (
                                SELECT Id
                                FROM assetPeriod
                                WHERE Status=1
                            )
                            GROUP BY PeriodId,assetId
                            ORDER BY PeriodId,assetId"""
            myCursor.execute(asset_query)
            asset_list= myCursor.fetchall()               
       
            #header of table
            my_period_query="""SELECT Name,Id
                                FROM assetperiod
                                ORDER BY year,month"""
            myCursor.execute(my_period_query)
            period_list=myCursor.fetchall()        
            
            #investor_names by id
            my_asset_bascket_query="""SELECT Name,Id
                                      FROM assetbasket
                                      ORDER BY Id"""
            myCursor.execute(my_asset_bascket_query)
            asset_basket_list=myCursor.fetchall()
            investor_payment_persent_query=F"""
                    SELECT PA.Total, PA.periodId AS PI, CustomerId,  SUM(Amount) AS payment
                    FROM payments
                    JOIN (

                    SELECT SUM( Amount ) AS Total, PeriodId
                    FROM payments
                    GROUP BY PeriodId
                    )PA ON PA.periodId = payments.periodId
                    WHERE customerId ='{customer_id}' 
                    GROUP BY PI
                     """
            myCursor.execute(investor_payment_persent_query)        
            investor_percent_period_list= myCursor.fetchall()       

            return period_list,asset_basket_list,asset_list,investor_percent_period_list

        except mc.Error as e:
             messageBoxDialog.show_critical_messagebox("{0} :geting investor from db was not successfully".format(e))

def getInvestors():  
        try:      
            mydb=Sql_DB()
            myConnection=mydb.db_connect()
            myCursor=myConnection.cursor()

            #header of table
            myColumnQuery="""SELECT COLUMN_NAME
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_NAME = N'Customers'"""
            myCursor.execute(myColumnQuery)
            columnName=myCursor.fetchall()
            #print(columnName)
            header=list(map(lambda x:x[0],columnName))
            #data of table

            myDataQuery="SELECT * FROM Customers"
            myCursor.execute(myDataQuery)
            data=myCursor.fetchall()
            #print(data)
            return header,data

        except mc.Error as e:
            messageBoxDialog.show_critical_messagebox("{0} :geting investor from db was not successfully".format(e))

def getInvestorInfo(inv_id):
    try:      
        mydb=Sql_DB()
        myConnection=mydb.db_connect()
        myCursor=myConnection.cursor()


        myDataQuery="""SELECT Name,Family,WhatsApp,NationCode,senior 
                       FROM Customers
                       WHERE Id = '%s' """%(inv_id)
             
        myCursor.execute(myDataQuery)
        data=myCursor.fetchone()
        inv={}
        inv['name']=data[0]
        inv['family']=data[1]
        inv['whatsapp']=data[2]
        inv['nationcode']=data[3]
        inv['senior']=data[4]
        return inv

    except mc.Error as e:
            messageBoxDialog.show_critical_messagebox(F"{e}")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    master=QMainWindow()
    ui=InvestorList(master)
    master.setCentralWidget(ui)
    master.show()
    sys.exit(app.exec_())
